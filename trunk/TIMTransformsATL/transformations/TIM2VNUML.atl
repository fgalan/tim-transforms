-- This program is free software; you can redistribute it and/or
-- modify it under the terms of the GNU General Public License
-- as published by the Free Software Foundation; either version 2
-- of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
--
-- An online copy of the licence can be found at http://www.gnu.org/copyleft/gpl.html
--
-- Copyright (C) 2008 Fermin Galan Marquez

module TIM2VNUML; 
create OUT : XML from IN : TIMSmall, SETTINGS : TestbedParameters;

uses TIMHelpers;

-------------
-- Helpers --
-------------

-- Return the VNUML setting object
helper def: settings : TestbedParameters!VNUMLTestbedParameters = 
	TestbedParameters!VNUMLTestbedParameters.allInstances()->first()
	;

-- Calculates the id associated to a given interface
helper def: idForIntf(intf: TIMSmall!CIM_IPProtocolEndpoint) : Integer =
	if not intf.isLoopback()
	then
		(intf.associatedVm()).vmInterfaces()->select(e | not e.isLoopback())->indexOf(intf)
	else
		(intf.associatedVm()).vmInterfaces()->select(e | e.isLoopback())->indexOf(intf)
	endif
;

-- Calculates the net name associated to a given interface (or loopback, if the interface is not)
-- associated to any net
helper def: netNameForIntf(intf : TIMSmall!CIM_IPProtocolEndpoint) : String =
	if not intf.isLoopback()
	then
		TIMSmall!TIM_MemberOfLink.allInstances()->select(e | e.Member->first() = intf)->first().Collection->first().InstanceID
	else
		'lo'
	endif
	;

-----------
-- Rules --
-----------

rule Root {
	from 
		i: TIMSmall!TIM_TestbedScenario
	to
		root: XML!Root (
			name <- 'vnuml',
			children <- Sequence{global,
						TIMSmall!TIM_LinkConnectivityCollection.allInstances()->collect (e | thisModule.resolveTemp(e,'net')),
						TIMSmall!CIM_ComputerSystem.allInstances()->collect (e | thisModule.resolveTemp(e,'vm')) }
		),
		global: XML!Element (
			name <- 'global',
			-- We assume that each input model containts exactly one testbed scenario, so we don't need
			-- to navigate through the CIM_HostedCollection and CIM_SystemComponent associations: we
			-- just include all the TIM_LinkConnectivityCollection and CIM_ComputerSystem instances
			children <- Sequence{version, simulationName, automac, vmMgmt, vmDefaults}
		),
		version: XML!Element (
			name <- 'version',
			children <- version_Text
		),
		version_Text: XML!TextNode (
			value <- thisModule.settings.specVersion
		),
		simulationName: XML!Element (
			name <- 'simulation_name',
			children <- simulationName_Text
		),
		simulationName_Text: XML!TextNode (
			value <- i.Name
		),
		automac: XML!Element (
			name <- 'automac'
		),
		vmMgmt: XML!Element (
			name <- 'vm_mgmt',
			children <- vmMgmt_attType
		),
		vmMgmt_attType: XML!Attribute (
			name <- 'type',
			value <- 'none'
		),
		vmDefaults: XML!Element (
			name <- 'vm_defaults',
			children <- Sequence{vmDefaults_attExecMode, filesystem, kernel, console}
		),
		vmDefaults_attExecMode: XML!Attribute (
			name <- 'exec_mode',
			value <- thisModule.settings.defaultExecMode
		),
		filesystem: XML!Element (
			name <- 'filesystem',
			children <- filesystem_attType,
			children <- filesystem_Text
		),
		filesystem_attType: XML!Attribute (
			name <- 'type',
			value <- thisModule.settings.defaultFilesystemType
		),
		filesystem_Text: XML!TextNode (
			value <- thisModule.settings.defaultFilesystem
		),
		kernel: XML!Element (
			name <- 'kernel',
			children <- kernel_Text
		),
		kernel_Text: XML!TextNode (
			value <- thisModule.settings.defaultKernel
		),
		console: XML!Element (
			name <- 'console',
			children <- console_attId,
			children <- console_Text
		),
		console_attId: XML!Attribute (
			name <- 'id',
			value <- '0'
		),
		console_Text: XML!TextNode (
			value <- thisModule.settings.defaultConsole
		)
}

rule Net {
	from
		i: TIMSmall!TIM_LinkConnectivityCollection
	to
		net: XML!Element (
			name <- 'net',
			children <- net_attName,
			children <- net_attMode
		),
		net_attName: XML!Attribute (
			name <- 'name',
			value <- i.InstanceID
		),
		net_attMode: XML!Attribute (
			name <- 'mode',
			value <- 'uml_switch'
		)
}

rule Vm {
	from
		i: TIMSmall!CIM_ComputerSystem
	to
		vm: XML!Element (
			name <- 'vm',
			children <- Sequence{vm_attName,
					i.vmInterfaces()->collect (e | thisModule.resolveTemp(e,'intf')),
					i.vmRoutes()->collect (e | thisModule.resolveTemp(e,'route')),
					i.vmForwarding()->collect (e | thisModule.resolveTemp(e,'forwarding')) }
		),
		vm_attName: XML!Attribute (
			name <- 'name',
			value <- i.Name
		)
}

rule Intf {
	from
		i: TIMSmall!CIM_IPProtocolEndpoint
	to
		intf: XML!Element (
			name <- 'if',
			children <- Sequence{intf_attId, intf_attNet,
					i.intfIpv4()->collect (e | thisModule.resolveTemp(e,'ipv4')),
					i.intfIpv6()->collect (e | thisModule.resolveTemp(e,'ipv6')) }

		),
		intf_attId: XML!Attribute (
			name <- 'id',
			value <- thisModule.idForIntf(i).toString()
		),
		intf_attNet: XML!Attribute (
			name <- 'net',
			value <- thisModule.netNameForIntf(i)
		)
}

rule Ipv4 {
	from
		i: TIMSmall!CIM_StaticIPAssignmentSettingData
	to
		ipv4: XML!Element (
			name <- 'ipv4',
			children <- ipv4_attMask,
			children <- ipv4_Text
		),
		ipv4_attMask: XML!Attribute (
			name <- 'mask',
			value <- i.SubnetMask
		),
		ipv4_Text: XML!TextNode (
			value <- i.IPv4Address
		)
}

rule Ipv6 {
	from
		i: TIMSmall!TIM_StaticIPv6AssignmentSettingData
	to
		ipv6: XML!Element (
			name <- 'ipv6',
			children <- ipv6_attMask,
			children <- ipv6_Text
		),
		ipv6_attMask: XML!Attribute (
			name <- 'mask',
			value <- '/' + i.PrefixLength.toString()
		),
		ipv6_Text: XML!TextNode (
			value <- i.IPv6Address
		)
}

rule Route {
	from
		i: TIMSmall!TIM_NextHopAddressedIPRoute
	to
		route: XML!Element (
			name <- 'route',
			children <- route_attGw,
			children <- route_attType,
			children <- route_Text
		),
		route_attGw: XML!Attribute (
			name <- 'gw',
			value <- i.NextHopAddress
		),
		route_attType: XML!Attribute (
			name <- 'type',
			value <- (if i.AddressType = 1 then 'ipv4' else 'ipv6' endif)
		),
		route_Text: XML!TextNode (
			value <- (if i.AddressType = 1 then 
					    -- IPv4
						i.DestinationAddress + '/' + i.DestinationMask.TranslateMask()
					  else
					    -- IPv6
					  	i.DestinationAddress + '/' + i.PrefixLength.toString()
					  endif)
		)
}

rule Forwarding {
	from
		i: TIMSmall!CIM_ForwardingService 
	to
		forwarding: XML!Element (
			name <- 'forwarding',
			children <- forwarding_attType
		),
		forwarding_attType: XML!Attribute (
			name <- 'type',
			value <- (if i.ProtocolType = 2 then
						'ipv4'
					  else
					  	if i.ProtocolType = 3 then
							'ipv6'
						else
							-- i.ProtocolType = 4
							'ip'
						endif
				      endif )
		)
}