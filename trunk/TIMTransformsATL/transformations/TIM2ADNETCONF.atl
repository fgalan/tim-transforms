-- This program is free software; you can redistribute it and/or
-- modify it under the terms of the GNU General Public License
-- as published by the Free Software Foundation; either version 2
-- of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
--
-- An online copy of the licence can be found at http://www.gnu.org/copyleft/gpl.html
--
-- Copyright (C) 2008 Fermin Galan Marquez

module TIM2ADNETCONF; 
create OUT : XML from IN : TIMSmall, SETTINGS : TestbedParameters;

uses TIMHelpers;

-------------
-- Helpers --
-------------

-- Return the VNUML setting object
helper def: settings : TestbedParameters!VNUMLTestbedParameters = 
	TestbedParameters!ADRENALINETestbedParameters.allInstances()->first()
	;

helper def: managementIp : Integer = thisModule.settings.baseMgtAddress;
helper def: currentVlan : Integer = thisModule.settings.baseVlan;
helper def: currentConnectIp: Integer = thisModule.settings.baseConnectAddress;

helper def: gre: Integer = 0;

-----------
-- Rules --
-----------

rule Root {
	from 
		i: TIMSmall!TIM_TestbedScenario
	to
		root: XML!Root (
			name <- 'adrenaline_netconf',
			children <- Sequence{conf,nodes,links}
		),
		conf: XML!Element (
			name <- 'conf'
		),
		nodes: XML!Element (
			name <- 'nodes',
			-- We assume that each input model containts exactly one testbed scenario, so we don't need
			-- to navigate through the CIM_SystemComponent association: we just include all the 
			-- CIM_ComputerSystem instances			
			children <-	TIMSmall!CIM_ComputerSystem.allInstances()->collect (e | thisModule.resolveTemp(e,'node'))
		),
		links: XML!Element (
			name <- 'links',
			-- We assume that each input model containts exactly one testbed scenario, so we don't need
			-- to navigate through the CIM_HostedCollection association: we just include all the 
			-- TIM_LinkConnectivityCollection instances
			children <-	TIMSmall!TIM_LinkConnectivityCollection.allInstances()->select(e | e.MaxConnections = 2)->collect (e | thisModule.resolveTemp(e,'link'))
		)		
}

rule Node {
	from
		i: TIMSmall!CIM_ComputerSystem
	to
		node: XML!Element (
			name <- 'node',
			children <- Sequence{node_attId, m_ip, lo_ip, 
				zebra_bin, ospfd_bin, lrm_bin, rsvpd_bin, rtap_bin, snmpd_bin, olrm_bin, cpbwm_bin}
		),
		node_attId: XML!Attribute (
			name <- 'id',
			value <- i.Name
		),
		m_ip: XML!Element (
			name <- 'm_ip',
			children <- m_ip_Text
		),
		m_ip_Text: XML!TextNode (
			value <- thisModule.managementIp.translateIp()
		),
		lo_ip: XML!Element (
			name <- 'lo_ip',
			children <- lo_ip_Text
		),
		lo_ip_Text: XML!TextNode (
			-- The checking prevent the ATL crash in case of scenarios without loopback interfaces
			-- (e.g. basic), although adnetconf.gui will complaint about it anyway
			value <- if i.vmInterfaces()->select(e | e.isLoopback())->size() > 0
					  then
						(i.vmInterfaces()->select(e | e.isLoopback())->first()).intfIpv4()->first().IPv4Address
					  else
						''
					  endif
		),
		zebra_bin: XML!Element (
			name <- 'zebra_bin',
			children <- zebra_bin_Text
		),
		zebra_bin_Text: XML!TextNode (
			value <- thisModule.settings.zebraBin
		),
		ospfd_bin: XML!Element (
			name <- 'ospfd_bin',
			children <- ospfd_bin_Text
		),
		ospfd_bin_Text: XML!TextNode (
			value <- thisModule.settings.ospfdBin
		),
		lrm_bin: XML!Element (
			name <- 'lrm_bin',
			children <- lrm_bin_Text
		),
		lrm_bin_Text: XML!TextNode (
			value <- thisModule.settings.lrmBin
		),
		rsvpd_bin: XML!Element (
			name <- 'rsvpd_bin',
			children <- rsvpd_bin_Text
		),
		rsvpd_bin_Text: XML!TextNode (
			value <- thisModule.settings.rsvpdBin
		),
		rtap_bin: XML!Element (
			name <- 'rtap_bin',
			children <- rtap_bin_Text
		),
		rtap_bin_Text: XML!TextNode (
			value <- thisModule.settings.rtapBin
		),
		snmpd_bin: XML!Element (
			name <- 'snmpd_bin',
			children <- snmpd_bin_Text
		),
		snmpd_bin_Text: XML!TextNode (
			value <- thisModule.settings.snmpdBin
		),
		olrm_bin: XML!Element (
			name <- 'olrm_bin',
			children <- olrm_bin_Text
		),
		olrm_bin_Text: XML!TextNode (
			value <- thisModule.settings.olrmBin
		),
		cpbwm_bin: XML!Element (
			name <- 'cpbwm_bin',
			children <- cpbwm_bin_Text
		),
		cpbwm_bin_Text: XML!TextNode (
			value <- thisModule.settings.cpbwmBin
		)
	do {
		thisModule.managementIp <- thisModule.managementIp +1;
	}
}

rule Link {
	from
		i: TIMSmall!TIM_LinkConnectivityCollection (
			-- Actually, this checking is redundant, due to the ->select in the links target on Root rule,
			-- but we include it to be formally right
			i.MaxConnections = 2
		)
	to
		link: XML!Element (
			name <- 'link',
			children <- Sequence{peer0, peer1,
				i.linkQoS()->collect (e | thisModule.resolveTemp(e,'qos')) }
		),
		peer0: XML!Element (
			name <- 'peer',
			children <- Sequence{peer0_attNode,peer0_attVlanDev,vlan_connection0}
		),
		peer0_attNode: XML!Attribute (
			name <- 'node',
			value <- (i.linkInterfaces()->at(1)).associatedVm().Name
		),
		peer0_attVlanDev: XML!Attribute (
			name <- 'vlan_dev',
			value <- thisModule.settings.vlanDev
		),
		vlan_connection0: XML!Element (
			name <- 'vlan_connection',
			children <- Sequence{vlan_connection0_attNet,vlan0,gre0}
		),
		vlan_connection0_attNet: XML!Attribute (
			name <- 'net',
			value <- thisModule.currentConnectIp.translateIp()
		),
		vlan0: XML!Element (
			-- Note that due to ADNETCONF model, vlan appers only in the peer0
			name <- 'vlan',
			children <- vlan0_Text
		),
		vlan0_Text: XML!TextNode (
			value <- thisModule.currentVlan.toString()
		),
		gre0: XML!Element (
			name <- 'gre',
			children <- name0,
			children <- ip0
		),
		name0: XML!Element (
			name <- 'name',
			children <- name0_Text
		),
		name0_Text: XML!TextNode (
			value <- 'gre'.concat(thisModule.gre.toString())
		),		
		ip0: XML!Element (
			name <- 'ip',
			children <- ip0_Text
		),
		ip0_Text: XML!TextNode (
			value <- (i.linkInterfaces()->at(1)).intfIpv4()->first().IPv4Address
		),		
		peer1: XML!Element (
			name <- 'peer',
			children <- Sequence{peer1_attNode,peer1_attVlanDev,vlan_connection1}
		),
		peer1_attNode: XML!Attribute (
			name <- 'node',
			value <- (i.linkInterfaces()->at(2)).associatedVm().Name
		),
		peer1_attVlanDev: XML!Attribute (
			name <- 'vlan_dev',
			value <- thisModule.settings.vlanDev
		),
		vlan_connection1: XML!Element (
			name <- 'vlan_connection',
			-- Note that due to ADNETCONF model, net attribute doesn't appear in the second peer
			children <- gre1
		),
		gre1: XML!Element (
			name <- 'gre',
			children <- name1,
			children <- ip1
		),
		name1: XML!Element (
			name <- 'name',
			children <- name1_Text
		),
		name1_Text: XML!TextNode (
			value <- 'gre'.concat((thisModule.gre + 1).toString())
		),		
		ip1: XML!Element (
			name <- 'ip',
			children <- ip1_Text
		),
		ip1_Text: XML!TextNode (
			value <- (i.linkInterfaces()->at(2)).intfIpv4()->first().IPv4Address
		)
	do {
		thisModule.gre <- thisModule.gre + 2;
		thisModule.currentVlan <- thisModule.currentVlan + 1;
		thisModule.currentConnectIp <- thisModule.currentConnectIp + 4;
	}
}

rule QoS {
	from 
		i: TIMSmall!TIM_TransmissionCharacteristics
	to
		qos: XML!Element (
			name <- 'qos',
			children <- Sequence{delay, drop, dup}
		),
		delay: XML!Element (
			name <- 'delay',
			children <- delay_Text
		),
		drop: XML!Element (
			name <- 'drop',
			children <- drop_Text
		),
		dup: XML!Element (
			name <- 'dup',
			children <- dup_Text
		),
		delay_Text: XML!TextNode (
			value <- i.DelayMean.toString()
		),
		drop_Text: XML!TextNode (
			value <- i.LossProbabilityValue.toString()
		),
		dup_Text: XML!TextNode (
			value <- i.DuplicationProbabilityValue.toString()
		)
}