-- This program is free software; you can redistribute it and/or
-- modify it under the terms of the GNU General Public License
-- as published by the Free Software Foundation; either version 2
-- of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
--
-- An online copy of the licence can be found at http://www.gnu.org/copyleft/gpl.html
--
-- Copyright (C) 2009 Fermin Galan Marquez

module ADNETCONF2XML; 
create OUT : XML from IN : ADNETCONF;

rule RootRule {
	from 
		i: ADNETCONF!AdrenalineNetconf
	to
		root: XML!Root (
			name <- 'adrenaline_netconf',
			children <- Sequence { AdrenalineNetconfNameType,
						thisModule.resolveTemp(ADNETCONF!Nodes.allInstances()->first(), 'Nodes'),
						thisModule.resolveTemp(ADNETCONF!Links.allInstances()->first(), 'Links') }	
		),
		AdrenalineNetconfNameType: XML!Attribute (
			name <- 'name',
			value <- i.name
		)
}

rule NodesRule {
	from
		i: ADNETCONF!Nodes
	to
		Nodes: XML!Element (
			name <- 'nodes',
			children <- ADNETCONF!Node.allInstances()->collect (e | thisModule.resolveTemp(e,'Node'))
		)
}

rule NodeRule {
	from
		i: ADNETCONF!Node
	to
		Node: XML!Element (
			name <- 'node',
			children <- Sequence {NodeIdAtt,
						ADNETCONF!MIp.allInstances()->select (e | i.mIp = e )->collect (e | thisModule.resolveTemp(e,'MIp')),
						ADNETCONF!LoIp.allInstances()->select (e | i.loIp = e )->collect (e | thisModule.resolveTemp(e,'LoIp')),						
						ADNETCONF!ZebraBin.allInstances()->select (e | i.zebraBin = e )->collect (e | thisModule.resolveTemp(e,'ZebraBin')),
						ADNETCONF!OspfdBin.allInstances()->select (e | i.ospfdBin = e )->collect (e | thisModule.resolveTemp(e,'OspfdBin')) }
		),
		NodeIdAtt: XML!Attribute (
			name <- 'id',
			value <- i.id
		)
}

rule MIpRule {
	from
		i: ADNETCONF!MIp
	to
		MIp: XML!Element (
			name <- 'm_ip',
			children <- MIpText
		),
		MIpText: XML!TextNode (
			value <- i._text
		)
}

rule LoIpRule {
	from
		i: ADNETCONF!LoIp
	to
		LoIp: XML!Element (
			name <- 'lo_ip',
			children <- LoIpText
		),
		LoIpText: XML!TextNode (
			value <- i._text
		)
}

rule ZebraBinRule {
	from
		i: ADNETCONF!ZebraBin
	to
		ZebraBin: XML!Element (
			name <- 'zebra_bin',
			children <- ZebraBinText
		),
		ZebraBinText: XML!TextNode (
			value <- i._text
		)
}

rule OspfdBinRule {
	from
		i: ADNETCONF!OspfdBin
	to
		OspfdBin: XML!Element (
			name <- 'ospfd_bin',
			children <- OspfdBinText
		),
		OspfdBinText: XML!TextNode (
			value <- i._text
		)
}

rule LinksRule {
	from
		i: ADNETCONF!Links
	to
		Links: XML!Element (
			name <- 'links',
			children <- ADNETCONF!Link.allInstances()->collect (e | thisModule.resolveTemp(e,'Link'))
		)
}

rule LinkRule {
	from
		i: ADNETCONF!Link
	to
		Link: XML!Element (
			name <- 'link',
			children <- Sequence { ADNETCONF!Peer.allInstances()->select (e | i.peer->includes(e) )->collect (e | thisModule.resolveTemp(e,'Peer')),
						ADNETCONF!Qos.allInstances()->select (e | i.qos = e )->collect (e | thisModule.resolveTemp(e,'Qos')) }
		)
}

rule PeerRule {
	from
		i: ADNETCONF!Peer
	to
		Peer: XML!Element (
			name <- 'peer',
			children <- Sequence { PeerNodeAtt, PeerVlanDevAtt,
						ADNETCONF!VlanConnection.allInstances()->select (e | i.vlanConnection = e )->collect (e | thisModule.resolveTemp(e,'VlanConnection')) }
		),
		PeerNodeAtt: XML!Attribute (
			name <- 'node',
			value <- i.node
		),
		PeerVlanDevAtt: XML!Attribute (
			name <- 'vlan_dev',
			value <- i.vlan_dev
		)
}

rule VlanConnectionRule {
	from
		i: ADNETCONF!VlanConnection
	to
		VlanConnection: XML!Element (
			name <- 'vlan_connection',
			children <- Sequence { VlanConnectionNetAtt,
						ADNETCONF!Vlan.allInstances()->select (e | i.vlan = e )->collect (e | thisModule.resolveTemp(e,'Vlan')),
						ADNETCONF!Gre.allInstances()->select (e | i.gre = e )->collect (e | thisModule.resolveTemp(e,'Gre')) }
		),
		VlanConnectionNetAtt: XML!Attribute (
			name <- 'net',
			value <-  i.net
		)
}

rule VlanRule {
	from
		i: ADNETCONF!Vlan
	to
		Vlan: XML!Element (
			name <- 'vlan',
			children <- VlanText
		),
		VlanText: XML!TextNode (
			value <- i._text
		)
}

rule GreRule {
	from
		i: ADNETCONF!Gre
	to
		Gre: XML!Element (
			name <- 'gre',
			children <- Sequence { ADNETCONF!Name.allInstances()->select (e | i.name = e )->collect (e | thisModule.resolveTemp(e,'Name')),
						ADNETCONF!Ip.allInstances()->select (e | i.ip = e )->collect (e | thisModule.resolveTemp(e,'Ip')) }
		)
}

rule NameRule {
	from
		i: ADNETCONF!Name
	to
		Name: XML!Element (
			name <- 'name',
			children <- NameText
		),
		NameText: XML!TextNode (
			value <- i._text
		)
}

rule IpRule {
	from
		i: ADNETCONF!Ip
	to
		Ip: XML!Element (
			name <- 'ip',
			children <- IpText
		),
		IpText: XML!TextNode (
			value <- i._text
		)
}

rule QosRule {
	from
		i: ADNETCONF!Qos
	to
		Qos: XML!Element (
			name <- 'qos',
			children <- Sequence { ADNETCONF!Delay.allInstances()->select (e | i.delay = e )->collect (e | thisModule.resolveTemp(e,'Delay')),
						ADNETCONF!Drop.allInstances()->select (e | i.drop = e )->collect (e | thisModule.resolveTemp(e,'Drop')),
						ADNETCONF!Dup.allInstances()->select (e | i.dup = e )->collect (e | thisModule.resolveTemp(e,'Dup')) }
		)
}

rule DelayRule {
	from
		i: ADNETCONF!Delay
	to
		Delay: XML!Element (
			name <- 'delay',
			children <- DelayText
		),
		DelayText: XML!TextNode (
			value <- i._text
		)
}

rule DropRule {
	from
		i: ADNETCONF!Drop
	to
		Drop: XML!Element (
			name <- 'drop',
			children <- DropText
		),
		DropText: XML!TextNode (
			value <- i._text
		)
}

rule DupRule {
	from
		i: ADNETCONF!Dup
	to
		Dup: XML!Element (
			name <- 'dup',
			children <- DupText
		),
		DupText: XML!TextNode (
			value <- i._text
		)
}
