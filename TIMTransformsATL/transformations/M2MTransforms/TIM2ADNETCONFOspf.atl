-- This program is free software; you can redistribute it and/or
-- modify it under the terms of the GNU General Public License
-- as published by the Free Software Foundation; either version 2
-- of the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
--
-- An online copy of the licence can be found at http://www.gnu.org/copyleft/gpl.html
--
-- Copyright (C) 2009 Fermin Galan Marquez

module TIM2ADNETCONFOspf; 
create OUT : ADNETCONFOspf from IN : TIMOspf, SETTINGS : TestbedParameters;

uses TIMOspfHelpers;

-------------
-- Helpers --
-------------

-- Return the ADNETCONF setting object
helper def: settings : TestbedParameters!ADRENALINETestbedParameters = 
	TestbedParameters!ADRENALINETestbedParameters.allInstances()->first()
	;

-----------
-- Rules --
-----------

rule MasterRule {
	from 
		i: TIMOspf!TIM_TestbedScenario
	to
		-- Rule #18: There is one OspfConf instance for each given TIM TestbedScenario
		OspfConf: ADNETCONFOspf!OspfConf (
			ospf <- TIMOspf!CIM_OSPFService.allInstances()->collect (e | thisModule.resolveTemp(e,'Ospf'))
		)
}

-- Rule #19: Each Ospf instance corresponds to one instance of OSPFService in TIM 
rule OspfMap {
	from
		i: TIMOspf!CIM_OSPFService
	to
		Ospf: ADNETCONFOspf!Ospf (
			-- Rule #20: node property is mapped from the Name of the ComputerSystem associated
			-- to OSFP service (through the HostedService association, see associatedComputerSystem 
			-- helper)
			node <- i.associatedComputerSystem().Name,
			network <- i.allServiceIPRanges()->collect (e | thisModule.resolveTemp(e,'Network'))
		)
	do {
		-- Use of parameter: zebraLogPath
		-- We need do this after the execution of the rule, otherwise, Ospf object would not 
		-- exists. The SetZebraLog is an imperative rule, called from a relation rule
		if(not thisModule.settings.zebraLogPath.oclIsUndefined())
			thisModule.SetZebraLog(Ospf);
		
		-- Use of parameter: ospfLogPath
		-- We need do this after the execution of the rule, otherwise, Ospf object would not 
		-- exists. The SetOspfdLog is an imperative rule, called from a relation rule		
		if(not thisModule.settings.ospfLogPath.oclIsUndefined())
			thisModule.SetOspfLog(Ospf);

		-- Use of parameter: password
		-- We need do this after the execution of the rule, otherwise, Ospf object would not 
		-- exists. The SetPassword is an imperative rule, called from a relation rule		
		if(not thisModule.settings.password.oclIsUndefined())
			thisModule.SetPassword(Ospf);
	}
}

rule SetZebraLog(o : ANETCONFOspf!Ospf) {
	to
		ZebraLog: ADNETCONFOspf!ZebraLog (
			_text <- thisModule.settings.zebraLogPath
		)
	do {
		o.zebraLog <- ZebraLog;
	}
}

rule SetOspfLog(o : ADNETCONFOspf!Ospf) {
	to
		OspfLog: ADNETCONFOspf!OspfLog (
			_text <- thisModule.settings.ospfLogPath
		)
	do {
		o.ospfLog <- OspfLog;
	}
}

rule SetPassword(o : ADNETCONFOspf!Ospf) {
	to
		Password: ADNETCONFOspf!Password (
			_text <- thisModule.settings.password
		)
	do {
		o.password <- Password;
	}
}

-- Rule #25: Each pair of Ip and Area (within Network, which is actually
-- a structural class) corresponds to a combination of OSPFArea
-- and RangeOfIPAddresses associated through an OSPFAreaConfiguration instance 
-- (through the AreaOfConfiguration and RangesOfConfiguration associations
-- respectively). The mapping is based on CIM_RangeOfIpAddress, which associated
-- area is calculed using the areaID helper (it could have be done in the opposite
-- way).

-- Rule #21: Each Network corresponds to a combination of OSPFArea and RangeOfIPAddresses 
-- associated through an OSPFAreaConfiguration instance (through the
-- AreaOfConfiguration and RangesOfConfiguration associations, respectively). The mapping 
-- is based on CIM_RangeOfIpAddress, which associated area is calculed using the areaID 
-- helper (it could have be done in the opposite way).
rule Network {
	from
		i: TIMOspf!CIM_RangeOfIPAddresses
	to
		Network: ADNETCONFOspf!Network (
			-- Rule #22: The text property in Network is derived from the AddressType, StartAddress 
			-- and EndAddress in the RangeOfIPAddresses instance
			_text <- i.StartAddress + '/' + i.commomMask().toString(),
			-- Rule #23: the area property in Area is derived from the AreaID property in the
			-- OSPFArea instance
			area <- i.areaID().translateIp()
		)
}